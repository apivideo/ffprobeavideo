{
  "{\"sourceRoot\":\"/Users/Doug/nodeprojects/vmafffmpeg/src\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/Users/Doug/nodeprojects/vmafffmpeg\",\"filename\":\"/Users/Doug/nodeprojects/vmafffmpeg/src/index.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/Doug/nodeprojects/vmafffmpeg\",\"plugins\":[{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.5.5": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/Doug/nodeprojects/vmafffmpeg/src",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/Users/Doug/nodeprojects/vmafffmpeg",
      "filename": "/Users/Doug/nodeprojects/vmafffmpeg/src/index.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/Doug/nodeprojects/vmafffmpeg",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "TSModuleBlock": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/Doug/nodeprojects/vmafffmpeg/src/index.js",
        "plugins": [
          "dynamicImport",
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/Doug/nodeprojects/vmafffmpeg/src/index.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/Doug/nodeprojects/vmafffmpeg/src",
        "sourceFileName": "index.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nrequire(\"dotenv/config\");\n\nvar _cors = _interopRequireDefault(require(\"cors\"));\n\nvar _express = _interopRequireDefault(require(\"express\"));\n\nvar _v = _interopRequireDefault(require(\"uuid/v4\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n//https://www.robinwieruch.de/minimal-node-js-babel-setup\n//great node tutorial\nvar app = (0, _express[\"default\"])();\napp.use((0, _cors[\"default\"])());\napp.use(_express[\"default\"].json());\napp.use(_express[\"default\"].urlencoded({\n  extended: true\n})); //read files\n\nvar fs = require('fs');\n\nvar path = \"../tests/\";\nvar test = {};\n\nvar spawn = require('child_process').spawn;\n\napp.get('/test', function (req, res) {\n  //get urls\n  //i exect 2 params reference url ref, test url test\n  var ref = req.query.refurl;\n  var test = req.query.testurl;\n  ref = ref.trim();\n  test = test.trim(); //create unique ID\n\n  var id = (0, _v[\"default\"])();\n  console.log(test);\n  console.log(ref); //kick off ffmpeg test\n\n  var file = \"test_\" + id + \".json\";\n  var videoJsonFile = \"json_\" + id + \".json\"; //stats on the reference video\n  //ffprobe -i <video> -hide_banner -show_format -v quiet -print_format json\n\n  var refJson = ffprobe(ref);\n  var testJson = ffprobe(test); //stats on the test video   \n  // let probeTest = spawn('ffprobe', ['-i', test, '-hide_banner', '-show_format', `-v`, 'quiet', `-print_format`, 'json']);\n  //  probeTest.stdout.on('data', (data) => {\n  //     console.log(`stdout: ${data}`);\n  //     var testJson = writeVideoData($data);\n  // });\n  //combine the json files and write to a json file\n\n  var combinedJson = \"{test:\" + testJson + \"}{reference:\" + refJson + \"} }\" > path + videoJsonFile; //compare the 2 videos\n\n  var ffmpeg = spawn('ffmpeg', ['-i', test, '-i', ref, '-lavfi', 'libvmaf=ssim=true:psnr=true:phone_model=true:log_fmt=json:log_path=' + path + file, \"-f\", 'null', '-']);\n  ffmpeg.stderr.on('data', function (err) {\n    console.log('err:', new String(err));\n  });\n  var response = {\n    id: id,\n    ref: ref,\n    refJson: refJson,\n    test: test,\n    testJson: testJson\n  };\n  return res.send(response);\n});\napp.get('/testResults', function (req, res) {\n  //i expect to get the uuid that corresponds to afilename\n  var id = req.query.id; //get the data that is stored on the server\n  //quality data\n\n  var filename = \"test_\" + id + \".json\"; //video data\n\n  var jsonFilename = \"json_\" + id + \",json\";\n  var result = fs.readFileSync(path + filename, 'utf8');\n  var json = JSON.parse(result);\n  var jsonData = JSON.parse(fs.readFileSync(path + jsonFilename, 'utf8'));\n  var returnJson = \"{ \" + jsonData + \"{VMAF:\" + json['VMAF score'] + \", PSNR:\" + json['PSNR score'] + \", SSIM:\" + json['SSIM score'] + \"}}\";\n  console.log(returnJson);\n  var response = {\n    returnJson: returnJson\n  };\n  return res.send(returnJson);\n  ;\n});\napp.listen(process.env.PORT, function () {\n  return console.log(\"Ready to process video files on port \".concat(process.env.PORT, \"!\"));\n});\n\nfunction ffprobe(videoUrl) {\n  var probe = spawn('ffprobe', ['-i', videoUrl, '-show_format', \"-v\", 'quiet', '-print_format', 'json']);\n  probe.stdout.on('data', function (data) {\n    console.log(\"stdout: \".concat(data));\n    var dataString = data.toString(); //    var jsonData = JSON.parse(dataString);\n\n    console.log(\"string: \" + dataString); //     console.log(\"JSON: \"+jsonData);\n  }); //var videoJson = JSON.parse(videoData);\n  //console.log(videoJson);\n  //var returnJson = \"{Duration: \"+videoJson.format.duration+\", Size: \"+videoJson.format.size+\", Bitrate: \"+videoJson.format.bit_rate+\"}\";\n  //return returnJson;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "index.js"
      ],
      "names": [
        "app",
        "use",
        "express",
        "json",
        "urlencoded",
        "extended",
        "fs",
        "require",
        "path",
        "test",
        "spawn",
        "get",
        "req",
        "res",
        "ref",
        "query",
        "refurl",
        "testurl",
        "trim",
        "id",
        "console",
        "log",
        "file",
        "videoJsonFile",
        "refJson",
        "ffprobe",
        "testJson",
        "combinedJson",
        "ffmpeg",
        "stderr",
        "on",
        "err",
        "String",
        "response",
        "send",
        "filename",
        "jsonFilename",
        "result",
        "readFileSync",
        "JSON",
        "parse",
        "jsonData",
        "returnJson",
        "listen",
        "process",
        "env",
        "PORT",
        "videoUrl",
        "probe",
        "stdout",
        "data",
        "dataString",
        "toString"
      ],
      "mappings": "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",
      "sourceRoot": "/Users/Doug/nodeprojects/vmafffmpeg/src",
      "sourcesContent": [
        "//https://www.robinwieruch.de/minimal-node-js-babel-setup\n//great node tutorial\nimport 'dotenv/config';\nimport cors from 'cors';\nimport express from 'express';\nimport uuidv4 from 'uuid/v4';\n\n\nconst app = express();\napp.use(cors());\n\napp.use(express.json());\napp.use(express.urlencoded({ extended: true }));\n\n//read files\nvar fs = require('fs');\nvar path = \"../tests/\"\n\nlet test= {};\nconst spawn = require('child_process').spawn;\n\n\napp.get('/test', (req, res) => {\n    //get urls\n    //i exect 2 params reference url ref, test url test\n    let ref = req.query.refurl;\n    let test = req.query.testurl;\n    ref = ref.trim();\n    test = test.trim();\n    //create unique ID\n    const id = uuidv4();\n   console.log(test);  \n    console.log(ref);\n    //kick off ffmpeg test\n    var file = \"test_\" +id+ \".json\";\n    var videoJsonFile = \"json_\"+id+\".json\";\n    \n //stats on the reference video\n //ffprobe -i <video> -hide_banner -show_format -v quiet -print_format json\n \n var refJson = ffprobe(ref);\n var testJson = ffprobe(test);\n \n \n //stats on the test video   \n// let probeTest = spawn('ffprobe', ['-i', test, '-hide_banner', '-show_format', `-v`, 'quiet', `-print_format`, 'json']);\n//  probeTest.stdout.on('data', (data) => {\n//     console.log(`stdout: ${data}`);\n//     var testJson = writeVideoData($data);\n// });\n \n \n  //combine the json files and write to a json file\n var combinedJson = \"{test:\"+ testJson+\"}{reference:\"+refJson+\"} }\" > path+videoJsonFile;\n    \n  //compare the 2 videos\n  let ffmpeg = spawn('ffmpeg', ['-i', test, '-i', ref, '-lavfi', 'libvmaf=ssim=true:psnr=true:phone_model=true:log_fmt=json:log_path='+path+file, `-f`, 'null', '-']);\n     \n     ffmpeg.stderr.on('data', (err) => {\n            console.log('err:', new String(err))\n      });\n    \n    const response = {\n      id,ref, refJson, test, testJson\n    };\n    return res.send(response);\n});\napp.get('/testResults', (req, res) => {\n  //i expect to get the uuid that corresponds to afilename\n  let id = req.query.id;\n  //get the data that is stored on the server\n  //quality data\n  let filename = \"test_\" +id+ \".json\";\n  //video data\n  let jsonFilename = \"json_\"+id+\",json\";\n  var result  = fs.readFileSync(path +filename, 'utf8');\n  var json = JSON.parse(result);\n  \n  var jsonData = JSON.parse(fs.readFileSync(path +jsonFilename, 'utf8'));\n  \n  var returnJson = \"{ \"+jsonData+\"{VMAF:\"+json['VMAF score']+\", PSNR:\"+json['PSNR score']+\", SSIM:\"+json['SSIM score']+\"}}\";\n  console.log(returnJson);\n  const response = {\n      returnJson\n    };\n  return res.send(returnJson);;\n});\n\n\napp.listen(process.env.PORT, () =>\n  console.log(`Ready to process video files on port ${process.env.PORT}!`),\n);\n\n\nfunction ffprobe(videoUrl){\n\tlet probe = spawn('ffprobe', ['-i', videoUrl, '-show_format', `-v`, 'quiet', '-print_format', 'json']);\n \n     probe.stdout.on('data', (data) => {\n        console.log(`stdout: ${data}`);\n        var dataString = data.toString();\n    //    var jsonData = JSON.parse(dataString);\n        console.log(\"string: \"+dataString);\n   //     console.log(\"JSON: \"+jsonData);\n        \n        \n });\n\t\n\t//var videoJson = JSON.parse(videoData);\n\t//console.log(videoJson);\n\t//var returnJson = \"{Duration: \"+videoJson.format.duration+\", Size: \"+videoJson.format.size+\", Bitrate: \"+videoJson.format.bit_rate+\"}\";\n\n    //return returnJson;\n\n}\n"
      ]
    },
    "sourceType": "script",
    "mtime": 1567319404000
  }
}