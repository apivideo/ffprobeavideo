{
  "{\"sourceRoot\":\"/Users/Doug/nodeprojects/vmafffmpeg/src\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/Users/Doug/nodeprojects/vmafffmpeg\",\"filename\":\"/Users/Doug/nodeprojects/vmafffmpeg/src/index.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/Doug/nodeprojects/vmafffmpeg\",\"plugins\":[{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.5.5": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/Doug/nodeprojects/vmafffmpeg/src",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/Users/Doug/nodeprojects/vmafffmpeg",
      "filename": "/Users/Doug/nodeprojects/vmafffmpeg/src/index.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/Doug/nodeprojects/vmafffmpeg",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "TSModuleBlock": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/Doug/nodeprojects/vmafffmpeg/src/index.js",
        "plugins": [
          "dynamicImport",
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/Doug/nodeprojects/vmafffmpeg/src/index.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/Doug/nodeprojects/vmafffmpeg/src",
        "sourceFileName": "index.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nrequire(\"dotenv/config\");\n\nvar _cors = _interopRequireDefault(require(\"cors\"));\n\nvar _express = _interopRequireDefault(require(\"express\"));\n\nvar _v = _interopRequireDefault(require(\"uuid/v4\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n//https://www.robinwieruch.de/minimal-node-js-babel-setup\n//great node tutorial\nvar app = (0, _express[\"default\"])();\napp.use((0, _cors[\"default\"])());\napp.use(_express[\"default\"].json());\napp.use(_express[\"default\"].urlencoded({\n  extended: true\n})); //read files\n\nvar fs = require('fs');\n\nvar path = \"../tests/\";\nvar test = {};\n\nvar spawn = require('child_process').spawn;\n\napp.get('/test', function (req, res) {\n  //get urls\n  //i exect 2 params reference url ref, test url test\n  var ref = req.query.refurl;\n  var test = req.query.testurl;\n  ref = ref.trim();\n  test = test.trim(); //create unique ID\n\n  var id = (0, _v[\"default\"])();\n  console.log(test);\n  console.log(ref); //kick off ffmpeg test\n\n  var file = \"test_\" + id + \".json\";\n  var videoJsonFile = \"json_\" + id + \".json\"; //stats on the reference video\n  //ffprobe -i <video> -hide_banner -show_format -v quiet -print_format json\n\n  var refJson = ffprobe(ref);\n  var testJson = ffprobe(test); //stats on the test video   \n  // let probeTest = spawn('ffprobe', ['-i', test, '-hide_banner', '-show_format', `-v`, 'quiet', `-print_format`, 'json']);\n  //  probeTest.stdout.on('data', (data) => {\n  //     console.log(`stdout: ${data}`);\n  //     var testJson = writeVideoData($data);\n  // });\n  //combine the json files and write to a json file\n\n  var combinedJson = \"{test:\" + testJson + \"}{reference:\" + refJson + \"} }\" > path + videoJsonFile; //compare the 2 videos\n\n  var ffmpeg = spawn('ffmpeg', ['-i', test, '-i', ref, '-lavfi', 'libvmaf=ssim=true:psnr=true:phone_model=true:log_fmt=json:log_path=' + path + file, \"-f\", 'null', '-']);\n  ffmpeg.stderr.on('data', function (err) {\n    console.log('err:', new String(err));\n  });\n  var response = {\n    id: id,\n    ref: ref,\n    refJson: refJson,\n    test: test,\n    testJson: testJson\n  };\n  return res.send(response);\n});\napp.get('/testResults', function (req, res) {\n  //i expect to get the uuid that corresponds to afilename\n  var id = req.query.id; //get the data that is stored on the server\n  //quality data\n\n  var filename = \"test_\" + id + \".json\"; //video data\n\n  var jsonFilename = \"json_\" + id + \",json\";\n  var result = fs.readFileSync(path + filename, 'utf8');\n  var json = JSON.parse(result);\n  var jsonData = JSON.parse(fs.readFileSync(path + jsonFilename, 'utf8'));\n  var returnJson = \"{ \" + jsonData + \"{VMAF:\" + json['VMAF score'] + \", PSNR:\" + json['PSNR score'] + \", SSIM:\" + json['SSIM score'] + \"}}\";\n  console.log(returnJson);\n  var response = {\n    returnJson: returnJson\n  };\n  return res.send(returnJson);\n  ;\n});\napp.listen(process.env.PORT, function () {\n  return console.log(\"Ready to process video files on port \".concat(process.env.PORT, \"!\"));\n});\n\nfunction ffprobe(videoUrl) {\n  var probe = spawn('ffprobe', ['-i', videoUrl, '-show_format', \"-v\", 'quiet', '-print_format', 'json']);\n  probe.stdout.on('data', function (data) {\n    console.log(\"stdout: \".concat(data));\n    var dataString = data.toString(); //    var jsonData = JSON.parse(dataString);\n\n    console.log(\"string: \" + dataString); //     console.log(\"JSON: \"+jsonData);\n  }); //var videoJson = JSON.parse(videoData);\n  //console.log(videoJson);\n  //var returnJson = \"{Duration: \"+videoJson.format.duration+\", Size: \"+videoJson.format.size+\", Bitrate: \"+videoJson.format.bit_rate+\"}\";\n  //return returnJson;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "index.js"
      ],
      "names": [
        "app",
        "use",
        "express",
        "json",
        "urlencoded",
        "extended",
        "fs",
        "require",
        "path",
        "test",
        "spawn",
        "get",
        "req",
        "res",
        "ref",
        "query",
        "refurl",
        "testurl",
        "trim",
        "id",
        "console",
        "log",
        "file",
        "videoJsonFile",
        "refJson",
        "ffprobe",
        "testJson",
        "combinedJson",
        "ffmpeg",
        "stderr",
        "on",
        "err",
        "String",
        "response",
        "send",
        "filename",
        "jsonFilename",
        "result",
        "readFileSync",
        "JSON",
        "parse",
        "jsonData",
        "returnJson",
        "listen",
        "process",
        "env",
        "PORT",
        "videoUrl",
        "probe",
        "stdout",
        "data",
        "dataString",
        "toString"
      ],
      "mappings": "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",
      "sourceRoot": "/Users/Doug/nodeprojects/vmafffmpeg/src",
      "sourcesContent": [
        "//https://www.robinwieruch.de/minimal-node-js-babel-setup\n//great node tutorial\nimport 'dotenv/config';\nimport cors from 'cors';\nimport express from 'express';\nimport uuidv4 from 'uuid/v4';\n\n\nconst app = express();\napp.use(cors());\n\napp.use(express.json());\napp.use(express.urlencoded({ extended: true }));\n\n//read files\nvar fs = require('fs');\nvar path = \"../tests/\"\n\nlet test= {};\nconst spawn = require('child_process').spawn;\n\n\napp.get('/test', (req, res) => {\n    //get urls\n    //i exect 2 params reference url ref, test url test\n    let ref = req.query.refurl;\n    let test = req.query.testurl;\n    ref = ref.trim();\n    test = test.trim();\n    //create unique ID\n    const id = uuidv4();\n   console.log(test);  \n    console.log(ref);\n    //kick off ffmpeg test\n    var file = \"test_\" +id+ \".json\";\n    var videoJsonFile = \"json_\"+id+\".json\";\n    \n //stats on the reference video\n //ffprobe -i <video> -hide_banner -show_format -v quiet -print_format json\n \n var refJson = ffprobe(ref);\n var testJson = ffprobe(test);\n \n \n //stats on the test video   \n// let probeTest = spawn('ffprobe', ['-i', test, '-hide_banner', '-show_format', `-v`, 'quiet', `-print_format`, 'json']);\n//  probeTest.stdout.on('data', (data) => {\n//     console.log(`stdout: ${data}`);\n//     var testJson = writeVideoData($data);\n// });\n \n \n  //combine the json files and write to a json file\n var combinedJson = \"{test:\"+ testJson+\"}{reference:\"+refJson+\"} }\" > path+videoJsonFile;\n    \n  //compare the 2 videos\n  let ffmpeg = spawn('ffmpeg', ['-i', test, '-i', ref, '-lavfi', 'libvmaf=ssim=true:psnr=true:phone_model=true:log_fmt=json:log_path='+path+file, `-f`, 'null', '-']);\n     \n     ffmpeg.stderr.on('data', (err) => {\n            console.log('err:', new String(err))\n      });\n    \n    const response = {\n      id,ref, refJson, test, testJson\n    };\n    return res.send(response);\n});\napp.get('/testResults', (req, res) => {\n  //i expect to get the uuid that corresponds to afilename\n  let id = req.query.id;\n  //get the data that is stored on the server\n  //quality data\n  let filename = \"test_\" +id+ \".json\";\n  //video data\n  let jsonFilename = \"json_\"+id+\",json\";\n  var result  = fs.readFileSync(path +filename, 'utf8');\n  var json = JSON.parse(result);\n  \n  var jsonData = JSON.parse(fs.readFileSync(path +jsonFilename, 'utf8'));\n  \n  var returnJson = \"{ \"+jsonData+\"{VMAF:\"+json['VMAF score']+\", PSNR:\"+json['PSNR score']+\", SSIM:\"+json['SSIM score']+\"}}\";\n  console.log(returnJson);\n  const response = {\n      returnJson\n    };\n  return res.send(returnJson);;\n});\n\n\napp.listen(process.env.PORT, () =>\n  console.log(`Ready to process video files on port ${process.env.PORT}!`),\n);\n\n\nfunction ffprobe(videoUrl){\n\tlet probe = spawn('ffprobe', ['-i', videoUrl, '-show_format', `-v`, 'quiet', '-print_format', 'json']);\n \n     probe.stdout.on('data', (data) => {\n        console.log(`stdout: ${data}`);\n        var dataString = data.toString();\n    //    var jsonData = JSON.parse(dataString);\n        console.log(\"string: \"+dataString);\n   //     console.log(\"JSON: \"+jsonData);\n        \n        \n });\n\t\n\t//var videoJson = JSON.parse(videoData);\n\t//console.log(videoJson);\n\t//var returnJson = \"{Duration: \"+videoJson.format.duration+\", Size: \"+videoJson.format.size+\", Bitrate: \"+videoJson.format.bit_rate+\"}\";\n\n    //return returnJson;\n\n}\n"
      ]
    },
    "sourceType": "script",
    "mtime": 1567319404000
  },
  "{\"sourceRoot\":\"/Users/Doug/Documents/Github/VideoQuality/vmafscan/src\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/Users/Doug/Documents/Github/VideoQuality/vmafscan\",\"filename\":\"/Users/Doug/Documents/Github/VideoQuality/vmafscan/src/index.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/Doug/Documents/Github/VideoQuality/vmafscan\",\"plugins\":[{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.5.5": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/Doug/Documents/Github/VideoQuality/vmafscan/src",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/Users/Doug/Documents/Github/VideoQuality/vmafscan",
      "filename": "/Users/Doug/Documents/Github/VideoQuality/vmafscan/src/index.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/Doug/Documents/Github/VideoQuality/vmafscan",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "TSModuleBlock": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/Doug/Documents/Github/VideoQuality/vmafscan/src/index.js",
        "plugins": [
          "dynamicImport",
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/Doug/Documents/Github/VideoQuality/vmafscan/src/index.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/Doug/Documents/Github/VideoQuality/vmafscan/src",
        "sourceFileName": "index.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nrequire(\"dotenv/config\");\n\nvar _cors = _interopRequireDefault(require(\"cors\"));\n\nvar _express = _interopRequireDefault(require(\"express\"));\n\nvar _v = _interopRequireDefault(require(\"uuid/v4\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n//https://www.robinwieruch.de/minimal-node-js-babel-setup\n//great node tutorial\nvar pug = require('pug'); //bull for queuing the vmaf ffmpeg jons\n\n\nvar Queue = require('bull');\n\nvar favicon = require('serve-favicon');\n\nvar app = (0, _express[\"default\"])();\napp.use(favicon('public/icon.ico'));\napp.use((0, _cors[\"default\"])());\napp.use(_express[\"default\"].json());\napp.use(_express[\"default\"].urlencoded({\n  extended: true\n}));\napp.set('view engine', 'pug');\napp.use(_express[\"default\"][\"static\"]('public/')); //read files\n\nvar fs = require('fs'); //var http = require('http');\n//var https = require('https');\n\n\nvar path = \"../tests/\";\nvar parsedTotalJson = \"\";\nvar test = {};\n\nvar spawn = require('child_process').spawn; //create the video queue\n//queue allows 2 jobs at a time\n\n\nvar videoQualityQueue = new Queue('ffmpeg-processing-qualityMetrics', {\n  limiter: {\n    max: 1,\n    duration: 1000\n  }\n});\nvar concurrency = 1;\nvideoQualityQueue.process(concurrency, function (job, done) {\n  var jobString = JSON.stringify(job);\n  var file = \"test_\" + job.data.fileID + \".json\";\n  console.log(path + file);\n  var ffmpegPromise = new Promise(function (resolve, reject) {\n    try {\n      var ffmpeg = spawn('ffmpeg', ['-i', job.data.testUrl, '-i', job.data.refUrl, '-filter_complex', '[0:v]scale=' + job.data.refVideoWidth + 'x' + job.data.refVideoHeight + ':flags=bicubic[main];[main][1:v]libvmaf=ssim=true:psnr=true:phone_model=true:log_fmt=json:log_path=' + path + file, \"-f\", 'null', '-']);\n      console.log(\"running test id:\" + job.data.fileID);\n      ffmpeg.stderr.on('data', function (err) {\n        console.log('err:', new String(err));\n      });\n      ffmpeg.stdout.on('data', function () {\n        console.log('stdout');\n        resolve(\"success!\");\n      });\n    } catch (Exception) {\n      reject(\"error in promise\");\n    }\n  });\n  return ffmpegPromise.then(function (successMessage) {\n    console.log(successMessage);\n    done();\n  });\n});\napp.get('/', function (req, res) {\n  return res.render('landing');\n});\napp.get('/probe', function (req, res) {\n  var url = req.query.url;\n  console.log(\"testurl=\" + url);\n  var probeJson = new Promise(function (resolve, reject) {\n    try {\n      ffprobe(url, function (result) {\n        //create combined JSON file\n        var resultJson = result;\n        resolve(resultJson);\n      });\n    } catch (Exception) {\n      reject(\"error in ffprobe promise\");\n    }\n  });\n  probeJson.then(function (value) {\n    //     console.log(\"total json promise:\"+ totalJson);\n    //compare the 2 videos\n    //no longer have to be the same size!!!\n    var parsedprobeJson = JSON.parse(value);\n    console.log(\"parsed json\" + value); //const response = {parsedprobeJson};\n\n    return res.status(200).send(parsedprobeJson);\n  });\n});\napp.get('/test', function (req, res) {\n  //get urls\n  //i exect 2 params reference url ref, test url test\n  var ref = req.query.refurl;\n  var test = req.query.testurl;\n  var api = false;\n\n  if (req.query.api == \"false\") {\n    api = false;\n  } else if (req.query.api == \"true\") {\n    api = true;\n  }\n\n  var testPriority = 5;\n\n  if (req.query.pri !== {}) {\n    testPriority = req.query.pri;\n  } //console.log(\"api: \" +api);\n  //create unique ID\n\n\n  var id = (0, _v[\"default\"])(); //get ffprobe format data of both files, and then run the vmaf comparison \n\n  var totalJson = \"\";\n  var jsonCombinedPromise = new Promise(function (resolve, reject) {\n    try {\n      ffprobe(ref, function (refresult) {\n        ffprobe(test, function (testresult) {\n          //create combined JSON file\n          var combinedJson = \"{\\\"test\\\":\" + testresult + \",\\\"reference\\\":\" + refresult + \"}\";\n          resolve(combinedJson);\n        });\n      });\n    } catch (Exception) {\n      reject(\"error in ffprobe promise\");\n    }\n  });\n  jsonCombinedPromise.then(function (value) {\n    totalJson = value; //  console.log(\"total json promise:\"+ totalJson);\n    //compare the 2 videos\n    //no longer have to be the same size!!!\n\n    parsedTotalJson = JSON.parse(totalJson);\n    console.log(parsedTotalJson);\n    var streamCount = parsedTotalJson['reference']['streams'].length;\n    var refWidth = 0;\n    var refHeight = 0;\n    var testWidth = 0;\n    var testHeight = 0;\n\n    for (var i = 0; i < streamCount; i++) {\n      if (parsedTotalJson['reference']['streams'][i]['codec_type'] == \"video\") {\n        refWidth = parsedTotalJson['reference']['streams'][i]['width'];\n        refHeight = parsedTotalJson['reference']['streams'][i]['height'];\n        console.log(\"ref: \" + refHeight + \" x\" + refWidth);\n      }\n\n      if (parsedTotalJson['test']['streams'][i]['codec_type'] == \"video\") {\n        testWidth = parsedTotalJson['test']['streams'][i]['width'];\n        testHeight = parsedTotalJson['test']['streams'][i]['height'];\n        console.log(\"test: \" + testHeight + \" x\" + testWidth);\n      }\n    } //console.log('ref video is (hxw):'+refHeight+refWidth);\n    //add video to the queue for quality scoring\n\n\n    var job = videoQualityQueue.add({\n      fileID: id,\n      testUrl: test,\n      refUrl: ref,\n      refVideoHeight: refHeight,\n      refVideoWidth: refWidth\n    }, {\n      priority: testPriority\n    });\n    totalJson = JSON.parse(totalJson);\n    var statusCode = 100;\n\n    if (api === true) {\n      var response = {\n        id: id,\n        statusCode: statusCode,\n        refHeight: refHeight,\n        refWidth: refWidth,\n        testWidth: testWidth,\n        testHeight: testHeight,\n        totalJson: totalJson\n      }; //send a 100 meaning that the test is in process\n\n      return res.status(200).send(response);\n    } else {\n      //build a page \t\t \n      return res.render('index', {\n        id: id,\n        statusCode: statusCode,\n        refHeight: refHeight,\n        refWidth: refWidth,\n        testWidth: testWidth,\n        testHeight: testHeight,\n        totalJson: totalJson\n      });\n    }\n  });\n});\napp.get('/testResults', function (req, res) {\n  //i expect to get the uuid that corresponds to afilename\n  var id = req.query.id;\n  var api = false;\n\n  if (req.query.api == \"false\") {\n    api = false;\n  } else if (req.query.api == \"true\") {\n    api = true;\n  } //get the data that is stored on the server\n  //quality data\n\n\n  var filename = \"test_\" + id + \".json\";\n  var result;\n\n  try {\n    result = fs.readFileSync(path + filename, 'utf8');\n  } catch (err) {\n    // no file found - not ready yet\n    var inProgress = JSON.parse(\"{\\\"statusCode\\\": 101, \\\"status\\\": \\\"Still processing. Try Again in a few minutes.\\\"}\");\n    return res.status(200).send(inProgress);\n  }\n\n  var json = JSON.parse(result);\n  var videojson = JSON.stringify(parsedTotalJson); // console.log(videojson);\n\n  var statusCode = 200;\n  var VMAF = json['VMAF score'];\n  var PSNR = json['PSNR score'];\n  var SSIM = json['SSIM score'];\n  var returnJson = \"{\\\"VMAF\\\":\" + json['VMAF score'] + \", \\\"PSNR\\\":\" + json['PSNR score'] + \", \\\"SSIM\\\":\" + json['SSIM score'] + \"}\";\n  returnJson = JSON.parse(returnJson); //console.log(returnJson);\n\n  var statusCode = 200;\n\n  if (api) {\n    var response = {\n      id: id,\n      statusCode: statusCode,\n      VMAF: VMAF,\n      PSNR: PSNR,\n      SSIM: SSIM\n    };\n    return res.status(200).send(response);\n  } else {\n    //build a page \t\t \n    return res.render('results', {\n      id: id,\n      statusCode: statusCode,\n      VMAF: VMAF,\n      PSNR: PSNR,\n      SSIM: SSIM\n    });\n  }\n});\napp.listen(1437, function () {\n  return console.log(\"Ready to process video files on port 1437!\");\n});\n\nfunction ffprobe(videoUrl, callback) {\n  var dataString = \"\";\n  var probe = spawn('ffprobe', ['-i', videoUrl, '-show_format', '-show_streams', \"-v\", 'quiet', '-print_format', 'json']); // console.log(\"ffprobe\" + videoUrl);\n\n  probe.stdout.on('data', function (data) {\n    // console.log(\"debugging DL\" +data.length);     \t\n    dataString += data.toString();\n    console.log(dataString);\n  });\n  probe.on('close', function (code) {\n    //console.log(\"close: \"+ dataString);\n    return callback(dataString);\n  });\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "index.js"
      ],
      "names": [
        "pug",
        "require",
        "Queue",
        "favicon",
        "app",
        "use",
        "express",
        "json",
        "urlencoded",
        "extended",
        "set",
        "fs",
        "path",
        "parsedTotalJson",
        "test",
        "spawn",
        "videoQualityQueue",
        "limiter",
        "max",
        "duration",
        "concurrency",
        "process",
        "job",
        "done",
        "jobString",
        "JSON",
        "stringify",
        "file",
        "data",
        "fileID",
        "console",
        "log",
        "ffmpegPromise",
        "Promise",
        "resolve",
        "reject",
        "ffmpeg",
        "testUrl",
        "refUrl",
        "refVideoWidth",
        "refVideoHeight",
        "stderr",
        "on",
        "err",
        "String",
        "stdout",
        "Exception",
        "then",
        "successMessage",
        "get",
        "req",
        "res",
        "render",
        "url",
        "query",
        "probeJson",
        "ffprobe",
        "result",
        "resultJson",
        "value",
        "parsedprobeJson",
        "parse",
        "status",
        "send",
        "ref",
        "refurl",
        "testurl",
        "api",
        "testPriority",
        "pri",
        "id",
        "totalJson",
        "jsonCombinedPromise",
        "refresult",
        "testresult",
        "combinedJson",
        "streamCount",
        "length",
        "refWidth",
        "refHeight",
        "testWidth",
        "testHeight",
        "i",
        "add",
        "priority",
        "statusCode",
        "response",
        "filename",
        "readFileSync",
        "inProgress",
        "videojson",
        "VMAF",
        "PSNR",
        "SSIM",
        "returnJson",
        "listen",
        "videoUrl",
        "callback",
        "dataString",
        "probe",
        "toString",
        "code"
      ],
      "mappings": "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",
      "sourceRoot": "/Users/Doug/Documents/Github/VideoQuality/vmafscan/src",
      "sourcesContent": [
        "//https://www.robinwieruch.de/minimal-node-js-babel-setup\n//great node tutorial\n\nimport 'dotenv/config';\nimport cors from 'cors';\nimport express from 'express';\nimport uuidv4 from 'uuid/v4';\n\nconst pug = require('pug');\n//bull for queuing the vmaf ffmpeg jons\nvar Queue = require('bull');\nvar favicon = require('serve-favicon');\nconst app = express();\napp.use(favicon('public/icon.ico')); \napp.use(cors());\napp.use(express.json());\napp.use(express.urlencoded({ extended: true }));\napp.set('view engine','pug');\napp.use(express.static('public/'));\n\n\n//read files\nvar fs = require('fs');\n//var http = require('http');\n//var https = require('https');\n\nvar path = \"../tests/\"\nvar parsedTotalJson=\"\";\nlet test= {};\nconst spawn = require('child_process').spawn;\n\n//create the video queue\n//queue allows 2 jobs at a time\nconst videoQualityQueue = new Queue('ffmpeg-processing-qualityMetrics', {\n  limiter: {\n    max: 1, \n    duration: 1000\n  }\n});\n\nconst concurrency = 1;\nvideoQualityQueue.process(concurrency, function(job, done) {\n    var jobString = JSON.stringify(job);\n    var file = \"test_\" +job.data.fileID+ \".json\";\n    console.log(path+file);\n    var ffmpegPromise = new Promise(function(resolve, reject) {\n         try {\n    \t\tlet ffmpeg = spawn('ffmpeg', ['-i', job.data.testUrl, '-i', job.data.refUrl, '-filter_complex', '[0:v]scale='+job.data.refVideoWidth+'x'+job.data.refVideoHeight+':flags=bicubic[main];[main][1:v]libvmaf=ssim=true:psnr=true:phone_model=true:log_fmt=json:log_path='+path+file, `-f`, 'null', '-']);\n    \t\tconsole.log(\"running test id:\" +job.data.fileID); \n    \t\tffmpeg.stderr.on('data', (err) => {\n            \tconsole.log('err:', new String(err));\n            \t\n    \t\t});\n    \t\tffmpeg.stdout.on('data', function(){ \n    \t\t\t\tconsole.log('stdout');\n    \t\t\t\tresolve(\"success!\");\n    \t\t\t\t\n    \t\t }); \n    \t  }\n    \t  catch (Exception){ \n    \t\t\treject(\"error in promise\");\n    \t  }\n    \t\n    });\n    return ffmpegPromise.then(function(successMessage){\n    \t\tconsole.log(successMessage);\n    \t\tdone();\n    \t\t\n    });\n});\n\napp.get('/',  (req, res) => {\n     return res.render('landing');\n});\n\napp.get('/probe', (req,res) =>{\n\tlet url = req.query.url;\n\tconsole.log(\"testurl=\"+url);\n\tvar probeJson = new Promise(function(resolve, reject) {\n  \t      \n  \t    try{  \n  \t      ffprobe(url, function(result) { \n    \t\t\t//create combined JSON file\n    \t\t\tvar resultJson = result;\n    \t\t\t\n    \t\t\tresolve(resultJson);\n           });\n          } \n          catch(Exception){\n          \treject(\"error in ffprobe promise\");\n          }\n    });\n    probeJson.then(function(value) {\n//     console.log(\"total json promise:\"+ totalJson);\n     //compare the 2 videos\n     //no longer have to be the same size!!!\n       var parsedprobeJson = JSON.parse(value);\n       console.log(\"parsed json\" + value);\n       //const response = {parsedprobeJson};\n       return res.status(200).send(parsedprobeJson);\n   });\n       \n});\n \n\napp.get('/test', (req, res) => {\n    //get urls\n    //i exect 2 params reference url ref, test url test\n    let ref = req.query.refurl;\n    let test = req.query.testurl;\n    let api =false;\n    \n    if (req.query.api == \"false\" ){\n       api = false;\n    }else if (req.query.api == \"true\" ){\n     \tapi = true;\n    }\n    let testPriority = 5;\n    if (req.query.pri !== {}){\n      testPriority = req.query.pri;\n    }\n\n    //console.log(\"api: \" +api);\n    //create unique ID\n    const id = uuidv4();\n    \n    //get ffprobe format data of both files, and then run the vmaf comparison \n    var totalJson = \"\";\n    var jsonCombinedPromise = new Promise(function(resolve, reject) {\n  \t      \n  \t    try{  \n  \t      ffprobe(ref, function(refresult) { \n    \t\tffprobe(test, function(testresult) {\n    \t\t\t//create combined JSON file\n    \t\t\tvar combinedJson = \"{\\\"test\\\":\"+ testresult+\",\\\"reference\\\":\"+refresult+\"}\"\n    \t\t\tresolve(combinedJson);\n    \t\t});\n           });\n          } \n          catch(Exception){\n          \treject(\"error in ffprobe promise\");\n          }   \n});\n\n\n\njsonCombinedPromise.then(function(value) {\n  totalJson = value;\n//  console.log(\"total json promise:\"+ totalJson);\n   //compare the 2 videos\n   //no longer have to be the same size!!!\n   parsedTotalJson = JSON.parse(totalJson);\n   console.log(parsedTotalJson);\n   var streamCount = parsedTotalJson['reference']['streams'].length;\n   var refWidth=0;\n   var refHeight = 0;\n   var testWidth=0;\n   var testHeight = 0;\n   for(var i=0;i<streamCount;i++){\n   \t\tif (parsedTotalJson['reference']['streams'][i]['codec_type'] ==\"video\"){\n   \t\t   refWidth = parsedTotalJson['reference']['streams'][i]['width'];\n   \t\t\trefHeight =parsedTotalJson['reference']['streams'][i]['height'];\n   \t\t\tconsole.log(\"ref: \"+refHeight + \" x\" +refWidth);\n   \t\t}\n   \t\tif (parsedTotalJson['test']['streams'][i]['codec_type'] ==\"video\"){\n   \t\t   testWidth = parsedTotalJson['test']['streams'][i]['width'];\n   \t\t\ttestHeight =parsedTotalJson['test']['streams'][i]['height'];\n   \t\t\tconsole.log(\"test: \"+testHeight + \" x\" +testWidth);\n   \t\t}\n   \n   } \n   \n   //console.log('ref video is (hxw):'+refHeight+refWidth);\n   //add video to the queue for quality scoring\n  \n   const job = videoQualityQueue.add({\n     fileID: id,\n     testUrl: test, \n     refUrl: ref,\n     refVideoHeight: refHeight,\n     refVideoWidth: refWidth\n   },{priority: testPriority});\n   \n\n    totalJson = JSON.parse(totalJson);\n    var statusCode = 100;\n    if (api===true){\n\n    \tconst response = {\n      \t\tid, statusCode, refHeight, refWidth,testWidth, testHeight, totalJson\n    \t};\n    \t//send a 100 meaning that the test is in process\n   \t\treturn res.status(200).send(response);\n   \t} else{\n   \t\t //build a page \t\t \n   \t\t return res.render('index', {\n  \t\t\tid, statusCode, refHeight, refWidth,testWidth, testHeight, totalJson\n\t\t });\n   \t\t \n   \t\t }\n  \n});\n \n  \n\n\n});\n\napp.get('/testResults', (req, res) => {\n  //i expect to get the uuid that corresponds to afilename\n  let id = req.query.id;\n      let api =false;\n    if (req.query.api == \"false\" ){\n       api = false;\n    }else if (req.query.api == \"true\" ){\n     \tapi = true;\n    }\n  //get the data that is stored on the server\n  //quality data\n  let filename = \"test_\" +id+ \".json\";\n  var result;\n  try {\n  result = fs.readFileSync(path +filename, 'utf8');\n} catch (err) {\n     // no file found - not ready yet\n     var inProgress = JSON.parse(\"{\\\"statusCode\\\": 101, \\\"status\\\": \\\"Still processing. Try Again in a few minutes.\\\"}\");\n     return res.status(200).send(inProgress);\n}\n\n  var json = JSON.parse(result);\n  var videojson = JSON.stringify(parsedTotalJson);\n // console.log(videojson);\n  var statusCode = 200;\n  var VMAF = json['VMAF score'];\n  var PSNR = json['PSNR score'];\n  var SSIM = json['SSIM score'];\n  var returnJson = \"{\\\"VMAF\\\":\"+json['VMAF score']+\", \\\"PSNR\\\":\"+json['PSNR score']+\", \\\"SSIM\\\":\"+json['SSIM score']+\"}\";\n  returnJson = JSON.parse(returnJson);\n  //console.log(returnJson);\n  var statusCode = 200;\n  if(api){\n    const response = {\n      id, statusCode,VMAF,PSNR,SSIM\n     };\n    return res.status(200).send(response);\n  }else{\n     //build a page \t\t \n     return res.render('results', {\n  \t\t\tid, statusCode,VMAF,PSNR,SSIM\n\t });\n   \t\t \n  }\n  \n});\n\n\napp.listen(1437, () =>\n  console.log(`Ready to process video files on port 1437!`),\n);\n\n\nfunction ffprobe(videoUrl, callback){\n\tvar dataString = \"\";\n\tlet probe = spawn('ffprobe', ['-i', videoUrl, '-show_format','-show_streams', `-v`, 'quiet', '-print_format', 'json']);\n    // console.log(\"ffprobe\" + videoUrl);\n     probe.stdout.on('data', (data) => {\n       // console.log(\"debugging DL\" +data.length);     \t\n        dataString += data.toString();\n\t\tconsole.log(dataString);\n \t});\n \tprobe.on('close', function(code) {\n \t\t//console.log(\"close: \"+ dataString);\n        return callback(dataString);\n    });\n\n}\n"
      ]
    },
    "sourceType": "script",
    "mtime": 1574149530301
  },
  "{\"sourceRoot\":\"/Users/dougsillars/Documents/Github/StreamClarity/vmafscan/src\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/Users/dougsillars/Documents/Github/StreamClarity/vmafscan\",\"filename\":\"/Users/dougsillars/Documents/Github/StreamClarity/vmafscan/src/index.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/dougsillars/Documents/Github/StreamClarity/vmafscan\",\"plugins\":[],\"presets\":[]}:7.5.5": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/dougsillars/Documents/Github/StreamClarity/vmafscan/src",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/Users/dougsillars/Documents/Github/StreamClarity/vmafscan",
      "filename": "/Users/dougsillars/Documents/Github/StreamClarity/vmafscan/src/index.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/dougsillars/Documents/Github/StreamClarity/vmafscan",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/dougsillars/Documents/Github/StreamClarity/vmafscan/src/index.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "/Users/dougsillars/Documents/Github/StreamClarity/vmafscan/src/index.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/dougsillars/Documents/Github/StreamClarity/vmafscan/src",
        "sourceFileName": "index.js"
      }
    },
    "ast": null,
    "code": "//https://www.robinwieruch.de/minimal-node-js-babel-setup\n//great node tutorial\nrequire('dotenv/config');\n\nconst cors = require('cors');\n\nconst express = require('express');\n\nconst uuidv4 = require('uuid/v4'); //import cors from 'cors';\n//import express from 'express';\n//import uuidv4 from 'uuid/v4';\n\n\nconst pug = require('pug'); //bull for queuing the vmaf ffmpeg jons\n\n\nvar Queue = require('bull');\n\nvar favicon = require('serve-favicon');\n\nconst app = express();\napp.use(favicon('public/icon.ico'));\napp.use(cors());\napp.use(express.json());\napp.use(express.urlencoded({\n  extended: true\n}));\napp.set('view engine', 'pug');\napp.use(express.static('public/')); //read files\n\nvar fs = require('fs'); //var http = require('http');\n//var https = require('https');\n\n\nvar path = \"../tests/\";\nvar parsedTotalJson = \"\";\nlet test = {};\n\nconst spawn = require('child_process').spawn; //create the video queue\n//queue allows 2 jobs at a time\n\n\nconst videoQualityQueue = new Queue('ffmpeg-processing-qualityMetrics', {\n  limiter: {\n    max: 1,\n    duration: 1000\n  }\n});\nconst concurrency = 1;\nvideoQualityQueue.process(concurrency, function (job, done) {\n  var jobString = JSON.stringify(job);\n  var file = \"test_\" + job.data.fileID + \".json\";\n  console.log(path + file);\n  console.log(\"mobile?\" + job.data.mobile);\n  var ffmpegPromise = new Promise(function (resolve, reject) {\n    var params = ':flags=bicubic[main];[main][1:v]libvmaf=ssim=true:psnr=true:phone_model=true:log_fmt=json:log_path=';\n\n    if (!job.data.mobile) {\n      params = ':flags=bicubic[main];[main][1:v]libvmaf=ssim=true:psnr=true:log_fmt=json:log_path=';\n    }\n\n    console.log(\"mobile: \" + job.data.mobile);\n    console.log(\"params: \" + params);\n\n    try {\n      let ffmpeg = spawn('ffmpeg', ['-i', job.data.testUrl, '-i', job.data.refUrl, '-filter_complex', '[0:v]scale=' + job.data.refVideoWidth + 'x' + job.data.refVideoHeight + params + path + file, `-f`, 'null', '-']);\n      console.log(\"running test id:\" + job.data.fileID);\n      ffmpeg.stderr.on('data', err => {\n        console.log('err:', new String(err));\n      });\n      ffmpeg.stdout.on('data', function () {\n        console.log('stdout');\n        resolve(\"success!\");\n      });\n    } catch (Exception) {\n      reject(\"error in promise\");\n    }\n  });\n  return ffmpegPromise.then(function (successMessage) {\n    console.log(successMessage);\n    done();\n  });\n});\napp.get('/', (req, res) => {\n  return res.render('landing');\n});\napp.get('/probe', (req, res) => {\n  let url = req.query.url;\n  console.log(\"testurl=\" + url);\n  var probeJson = new Promise(function (resolve, reject) {\n    try {\n      ffprobe(url, function (result) {\n        //create combined JSON file\n        var resultJson = result;\n        resolve(resultJson);\n      });\n    } catch (Exception) {\n      reject(\"error in ffprobe promise\");\n    }\n  });\n  probeJson.then(function (value) {\n    //     console.log(\"total json promise:\"+ totalJson);\n    //compare the 2 videos\n    //no longer have to be the same size!!!\n    var parsedprobeJson = JSON.parse(value);\n    console.log(\"parsed json\" + value); //const response = {parsedprobeJson};\n\n    return res.status(200).send(parsedprobeJson);\n  });\n});\napp.get('/test', (req, res) => {\n  //get urls\n  //i exect 2 params reference url ref, test url test\n  //i expect 3 parameters reference url ref, test url test, and mobile model\n  let ref = req.query.refurl;\n  let test = req.query.testurl;\n  let api = false;\n  let mobile = true;\n\n  if (req.query.api == \"false\") {\n    api = false;\n  } else if (req.query.api == \"true\") {\n    api = true;\n  }\n\n  if (req.query.mobilemodel == \"on\") {\n    mobile = true;\n  } else {\n    mobile = false;\n  }\n\n  let testPriority = 5;\n\n  if (req.query.pri !== {}) {\n    testPriority = req.query.pri;\n  } //console.log(\"api: \" +api);\n  //create unique ID\n\n\n  const id = uuidv4(); //get ffprobe format data of both files, and then run the vmaf comparison \n\n  var totalJson = \"\";\n  var jsonCombinedPromise = new Promise(function (resolve, reject) {\n    try {\n      ffprobe(ref, function (refresult) {\n        ffprobe(test, function (testresult) {\n          //create combined JSON file\n          var combinedJson = \"{\\\"test\\\":\" + testresult + \",\\\"reference\\\":\" + refresult + \",\\\"mobile\\\":\" + mobile + \"}\";\n          resolve(combinedJson);\n        });\n      });\n    } catch (Exception) {\n      reject(\"error in ffprobe promise\");\n    }\n  });\n  jsonCombinedPromise.then(function (value) {\n    totalJson = value; //  console.log(\"total json promise:\"+ totalJson);\n    //compare the 2 videos\n    //no longer have to be the same size!!!\n\n    parsedTotalJson = JSON.parse(totalJson);\n    console.log(parsedTotalJson);\n    var streamCount = parsedTotalJson['reference']['streams'].length;\n    var mobile = parsedTotalJson['mobile'];\n    var refWidth = 0;\n    var refHeight = 0;\n    var testWidth = 0;\n    var testHeight = 0;\n\n    for (var i = 0; i < streamCount; i++) {\n      if (parsedTotalJson['reference']['streams'][i]['codec_type'] == \"video\") {\n        refWidth = parsedTotalJson['reference']['streams'][i]['width'];\n        refHeight = parsedTotalJson['reference']['streams'][i]['height'];\n        console.log(\"ref: \" + refHeight + \" x\" + refWidth);\n      }\n\n      if (parsedTotalJson['test']['streams'][i]['codec_type'] == \"video\") {\n        testWidth = parsedTotalJson['test']['streams'][i]['width'];\n        testHeight = parsedTotalJson['test']['streams'][i]['height'];\n        console.log(\"test: \" + testHeight + \" x\" + testWidth);\n      }\n    } //console.log('ref video is (hxw):'+refHeight+refWidth);\n    //add video to the queue for quality scoring\n\n\n    const job = videoQualityQueue.add({\n      fileID: id,\n      testUrl: test,\n      refUrl: ref,\n      mobile: mobile,\n      refVideoHeight: refHeight,\n      refVideoWidth: refWidth\n    }, {\n      priority: testPriority\n    });\n    console.log(\"fileid:\" + id + \"mobile\" + mobile);\n    totalJson = JSON.parse(totalJson);\n    var statusCode = 100;\n\n    if (api === true) {\n      const response = {\n        id,\n        statusCode,\n        refHeight,\n        refWidth,\n        testWidth,\n        testHeight,\n        totalJson,\n        mobile\n      }; //send a 100 meaning that the test is in process\n\n      return res.status(200).send(response);\n    } else {\n      //build a page \t\t \n      return res.render('index', {\n        id,\n        statusCode,\n        refHeight,\n        refWidth,\n        testWidth,\n        testHeight,\n        totalJson,\n        mobile\n      });\n    }\n  });\n});\napp.get('/testResults', (req, res) => {\n  //i expect to get the uuid that corresponds to afilename\n  let id = req.query.id;\n  let api = false;\n\n  if (req.query.api == \"false\") {\n    api = false;\n  } else if (req.query.api == \"true\") {\n    api = true;\n  }\n\n  let mobile = req.query.mobile;\n  console.log(\"mobile model:\" + mobile); //get the data that is stored on the server\n  //quality data\n\n  let filename = \"test_\" + id + \".json\";\n  var result;\n\n  try {\n    result = fs.readFileSync(path + filename, 'utf8');\n  } catch (err) {\n    // no file found - not ready yet\n    var inProgress = JSON.parse(\"{\\\"statusCode\\\": 101, \\\"status\\\": \\\"Still processing. Try Again in a few minutes.\\\"}\");\n    return res.status(200).send(inProgress);\n  }\n\n  var json = JSON.parse(result);\n  var videojson = JSON.stringify(parsedTotalJson);\n  console.log(videojson);\n  var statusCode = 200;\n  var VMAF = json['VMAF score'];\n  var PSNR = json['PSNR score'];\n  var SSIM = json['SSIM score'];\n  var returnJson = \"{\\\"VMAF\\\":\" + json['VMAF score'] + \", \\\"PSNR\\\":\" + json['PSNR score'] + \", \\\"SSIM\\\":\" + json['SSIM score'] + \", \\\"mobile\\\":\" + mobile + \"}\";\n  returnJson = JSON.parse(returnJson); //console.log(returnJson);\n\n  var statusCode = 200;\n\n  if (api) {\n    const response = {\n      id,\n      mobile,\n      statusCode,\n      VMAF,\n      PSNR,\n      SSIM\n    };\n    return res.status(200).send(response);\n  } else {\n    //build a page \t\t \n    return res.render('results', {\n      id,\n      mobile,\n      statusCode,\n      VMAF,\n      PSNR,\n      SSIM\n    });\n  }\n});\napp.listen(1437, () => console.log(`Ready to process video files on port 1437!`));\n\nfunction ffprobe(videoUrl, callback) {\n  var dataString = \"\";\n  let probe = spawn('ffprobe', ['-i', videoUrl, '-show_format', '-show_streams', `-v`, 'quiet', '-print_format', 'json']); // console.log(\"ffprobe\" + videoUrl);\n\n  probe.stdout.on('data', data => {\n    // console.log(\"debugging DL\" +data.length);     \t\n    dataString += data.toString();\n    console.log(dataString);\n  });\n  probe.on('close', function (code) {\n    //console.log(\"close: \"+ dataString);\n    return callback(dataString);\n  });\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "index.js"
      ],
      "names": [
        "require",
        "cors",
        "express",
        "uuidv4",
        "pug",
        "Queue",
        "favicon",
        "app",
        "use",
        "json",
        "urlencoded",
        "extended",
        "set",
        "static",
        "fs",
        "path",
        "parsedTotalJson",
        "test",
        "spawn",
        "videoQualityQueue",
        "limiter",
        "max",
        "duration",
        "concurrency",
        "process",
        "job",
        "done",
        "jobString",
        "JSON",
        "stringify",
        "file",
        "data",
        "fileID",
        "console",
        "log",
        "mobile",
        "ffmpegPromise",
        "Promise",
        "resolve",
        "reject",
        "params",
        "ffmpeg",
        "testUrl",
        "refUrl",
        "refVideoWidth",
        "refVideoHeight",
        "stderr",
        "on",
        "err",
        "String",
        "stdout",
        "Exception",
        "then",
        "successMessage",
        "get",
        "req",
        "res",
        "render",
        "url",
        "query",
        "probeJson",
        "ffprobe",
        "result",
        "resultJson",
        "value",
        "parsedprobeJson",
        "parse",
        "status",
        "send",
        "ref",
        "refurl",
        "testurl",
        "api",
        "mobilemodel",
        "testPriority",
        "pri",
        "id",
        "totalJson",
        "jsonCombinedPromise",
        "refresult",
        "testresult",
        "combinedJson",
        "streamCount",
        "length",
        "refWidth",
        "refHeight",
        "testWidth",
        "testHeight",
        "i",
        "add",
        "priority",
        "statusCode",
        "response",
        "filename",
        "readFileSync",
        "inProgress",
        "videojson",
        "VMAF",
        "PSNR",
        "SSIM",
        "returnJson",
        "listen",
        "videoUrl",
        "callback",
        "dataString",
        "probe",
        "toString",
        "code"
      ],
      "mappings": "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",
      "sourceRoot": "/Users/dougsillars/Documents/Github/StreamClarity/vmafscan/src",
      "sourcesContent": [
        "//https://www.robinwieruch.de/minimal-node-js-babel-setup\n//great node tutorial\n\n\nrequire('dotenv/config');\nconst cors = require('cors');\nconst express =require('express');\nconst uuidv4 =require('uuid/v4');\n\n//import cors from 'cors';\n//import express from 'express';\n//import uuidv4 from 'uuid/v4';\n\nconst pug = require('pug');\n//bull for queuing the vmaf ffmpeg jons\nvar Queue = require('bull');\nvar favicon = require('serve-favicon');\nconst app = express();\napp.use(favicon('public/icon.ico')); \napp.use(cors());\napp.use(express.json());\napp.use(express.urlencoded({ extended: true }));\napp.set('view engine','pug');\napp.use(express.static('public/'));\n\n\n//read files\nvar fs = require('fs');\n//var http = require('http');\n//var https = require('https');\n\nvar path = \"../tests/\"\nvar parsedTotalJson=\"\";\nlet test= {};\nconst spawn = require('child_process').spawn;\n\n//create the video queue\n//queue allows 2 jobs at a time\nconst videoQualityQueue = new Queue('ffmpeg-processing-qualityMetrics', {\n  limiter: {\n    max: 1, \n    duration: 1000\n  }\n});\n\nconst concurrency = 1;\nvideoQualityQueue.process(concurrency, function(job, done) {\n    var jobString = JSON.stringify(job);\n    var file = \"test_\" +job.data.fileID+ \".json\";\n    console.log(path+file);\n\tconsole.log(\"mobile?\" +job.data.mobile);\n    var ffmpegPromise = new Promise(function(resolve, reject) {\n\t\tvar params = ':flags=bicubic[main];[main][1:v]libvmaf=ssim=true:psnr=true:phone_model=true:log_fmt=json:log_path=';\n\t\tif(!job.data.mobile){\n\t\t\tparams = ':flags=bicubic[main];[main][1:v]libvmaf=ssim=true:psnr=true:log_fmt=json:log_path='\n\t\t}\n\t\tconsole.log(\"mobile: \" +job.data.mobile);\n\t\tconsole.log(\"params: \" +params);\n         try {\n    \t\tlet ffmpeg = spawn('ffmpeg', ['-i', job.data.testUrl, '-i', job.data.refUrl, '-filter_complex', '[0:v]scale='+job.data.refVideoWidth+'x'+job.data.refVideoHeight+params+path+file, `-f`, 'null', '-']);\n    \t\tconsole.log(\"running test id:\" +job.data.fileID); \n    \t\tffmpeg.stderr.on('data', (err) => {\n            \tconsole.log('err:', new String(err));\n            \t\n    \t\t});\n    \t\tffmpeg.stdout.on('data', function(){ \n    \t\t\t\tconsole.log('stdout');\n    \t\t\t\tresolve(\"success!\");\n    \t\t\t\t\n    \t\t }); \n    \t  }\n    \t  catch (Exception){ \n    \t\t\treject(\"error in promise\");\n    \t  }\n    \t\n    });\n    return ffmpegPromise.then(function(successMessage){\n    \t\tconsole.log(successMessage);\n    \t\tdone();\n    \t\t\n    });\n});\n\napp.get('/',  (req, res) => {\n     return res.render('landing');\n});\n\napp.get('/probe', (req,res) =>{\n\tlet url = req.query.url;\n\tconsole.log(\"testurl=\"+url);\n\tvar probeJson = new Promise(function(resolve, reject) {\n  \t      \n  \t    try{  \n  \t      ffprobe(url, function(result) { \n    \t\t\t//create combined JSON file\n    \t\t\tvar resultJson = result;\n    \t\t\t\n    \t\t\tresolve(resultJson);\n           });\n          } \n          catch(Exception){\n          \treject(\"error in ffprobe promise\");\n          }\n    });\n    probeJson.then(function(value) {\n//     console.log(\"total json promise:\"+ totalJson);\n     //compare the 2 videos\n     //no longer have to be the same size!!!\n       var parsedprobeJson = JSON.parse(value);\n       console.log(\"parsed json\" + value);\n       //const response = {parsedprobeJson};\n       return res.status(200).send(parsedprobeJson);\n   });\n       \n});\n \n\napp.get('/test', (req, res) => {\n    //get urls\n    //i exect 2 params reference url ref, test url test\n\t//i expect 3 parameters reference url ref, test url test, and mobile model\n    let ref = req.query.refurl;\n    let test = req.query.testurl;\n    let api =false;\n\tlet mobile = true;\n    \n\t\n    if (req.query.api == \"false\" ){\n       api = false;\n    }else if (req.query.api == \"true\" ){\n     \tapi = true;\n    }\n \n    if (req.query.mobilemodel == \"on\" ){\n     \tmobile = true;\n    }else{ mobile=false;}\n\t\n    let testPriority = 5;\n    if (req.query.pri !== {}){\n      testPriority = req.query.pri;\n    }\n\n    //console.log(\"api: \" +api);\n    //create unique ID\n    const id = uuidv4();\n    \n    //get ffprobe format data of both files, and then run the vmaf comparison \n    var totalJson = \"\";\n    var jsonCombinedPromise = new Promise(function(resolve, reject) {\n  \t      \n  \t    try{  \n  \t      ffprobe(ref, function(refresult) { \n    \t\tffprobe(test, function(testresult) {\n    \t\t\t//create combined JSON file\n    \t\t\tvar combinedJson = \"{\\\"test\\\":\"+ testresult+\",\\\"reference\\\":\"+refresult+\",\\\"mobile\\\":\"+mobile+\"}\"\n    \t\t\tresolve(combinedJson);\n    \t\t});\n           });\n          } \n          catch(Exception){\n          \treject(\"error in ffprobe promise\");\n          }   \n});\n\n\n\njsonCombinedPromise.then(function(value) {\n  totalJson = value;\n//  console.log(\"total json promise:\"+ totalJson);\n   //compare the 2 videos\n   //no longer have to be the same size!!!\n   parsedTotalJson = JSON.parse(totalJson);\n   console.log(parsedTotalJson);\n   var streamCount = parsedTotalJson['reference']['streams'].length;\n   var mobile = parsedTotalJson['mobile'];\n   var refWidth=0;\n   var refHeight = 0;\n   var testWidth=0;\n   var testHeight = 0;\n   for(var i=0;i<streamCount;i++){\n   \t\tif (parsedTotalJson['reference']['streams'][i]['codec_type'] ==\"video\"){\n   \t\t   refWidth = parsedTotalJson['reference']['streams'][i]['width'];\n   \t\t\trefHeight =parsedTotalJson['reference']['streams'][i]['height'];\n   \t\t\tconsole.log(\"ref: \"+refHeight + \" x\" +refWidth);\n   \t\t}\n   \t\tif (parsedTotalJson['test']['streams'][i]['codec_type'] ==\"video\"){\n   \t\t   testWidth = parsedTotalJson['test']['streams'][i]['width'];\n   \t\t\ttestHeight =parsedTotalJson['test']['streams'][i]['height'];\n   \t\t\tconsole.log(\"test: \"+testHeight + \" x\" +testWidth);\n   \t\t}\n   \n   } \n   \n   //console.log('ref video is (hxw):'+refHeight+refWidth);\n   //add video to the queue for quality scoring\n  \n   const job = videoQualityQueue.add({\n     fileID: id,\n     testUrl: test, \n     refUrl: ref,\n\t mobile: mobile,\n     refVideoHeight: refHeight,\n     refVideoWidth: refWidth\n   },{priority: testPriority});\n   \n   console.log(\"fileid:\" +id +\"mobile\"+mobile);\n    totalJson = JSON.parse(totalJson);\n    var statusCode = 100;\n    if (api===true){\n\n    \tconst response = {\n      \t\tid, statusCode, refHeight, refWidth,testWidth, testHeight, totalJson, mobile\n    \t};\n    \t//send a 100 meaning that the test is in process\n   \t\treturn res.status(200).send(response);\n   \t} else{\n   \t\t //build a page \t\t \n   \t\t return res.render('index', {\n  \t\t\tid, statusCode, refHeight, refWidth,testWidth, testHeight, totalJson, mobile\n\t\t });\n   \t\t \n   \t\t }\n  \n});\n \n  \n\n\n});\n\napp.get('/testResults', (req, res) => {\n  //i expect to get the uuid that corresponds to afilename\n  let id = req.query.id;\n      let api =false;\n    if (req.query.api == \"false\" ){\n       api = false;\n    }else if (req.query.api == \"true\" ){\n     \tapi = true;\n    }\n  let mobile = req.query.mobile;\n  console.log(\"mobile model:\" + mobile);\n\t\n  //get the data that is stored on the server\n  //quality data\n  let filename = \"test_\" +id+ \".json\";\n  var result;\n  try {\n  result = fs.readFileSync(path +filename, 'utf8');\n} catch (err) {\n     // no file found - not ready yet\n     var inProgress = JSON.parse(\"{\\\"statusCode\\\": 101, \\\"status\\\": \\\"Still processing. Try Again in a few minutes.\\\"}\");\n     return res.status(200).send(inProgress);\n}\n\n  var json = JSON.parse(result);\n  var videojson = JSON.stringify(parsedTotalJson);\n  console.log(videojson);\n  var statusCode = 200;\n  var VMAF = json['VMAF score'];\n  var PSNR = json['PSNR score'];\n  var SSIM = json['SSIM score'];\n  var returnJson = \"{\\\"VMAF\\\":\"+json['VMAF score']+\", \\\"PSNR\\\":\"+json['PSNR score']+\", \\\"SSIM\\\":\"+json['SSIM score']+\", \\\"mobile\\\":\"+mobile+\"}\";\n  returnJson = JSON.parse(returnJson);\n  //console.log(returnJson);\n  var statusCode = 200;\n  if(api){\n    const response = {\n      id, mobile,statusCode,VMAF,PSNR,SSIM\n     };\n    return res.status(200).send(response);\n  }else{\n     //build a page \t\t \n     return res.render('results', {\n  \t\t\tid, mobile,statusCode,VMAF,PSNR,SSIM\n\t });\n   \t\t \n  }\n  \n});\n\n\napp.listen(1437, () =>\n  console.log(`Ready to process video files on port 1437!`),\n);\n\n\nfunction ffprobe(videoUrl, callback){\n\tvar dataString = \"\";\n\tlet probe = spawn('ffprobe', ['-i', videoUrl, '-show_format','-show_streams', `-v`, 'quiet', '-print_format', 'json']);\n    // console.log(\"ffprobe\" + videoUrl);\n     probe.stdout.on('data', (data) => {\n       // console.log(\"debugging DL\" +data.length);     \t\n        dataString += data.toString();\n\t\tconsole.log(dataString);\n \t});\n \tprobe.on('close', function(code) {\n \t\t//console.log(\"close: \"+ dataString);\n        return callback(dataString);\n    });\n\n}\n"
      ]
    },
    "sourceType": "module",
    "mtime": 1592891779829
  }
}